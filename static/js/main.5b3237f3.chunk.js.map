{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","Components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","dist","to","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","role","onClick","changeMode","htmlFor","dbMode","greyMode","gMode","rMode","yMode","skMode","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","backgroundColor","color","heading","value","placeholder","onChange","event","console","log","target","cursor","rows","newtext","toUpperCase","newtext2","toLocaleLowerCase","split","reverse","join","reversealpha","RemoveSpace","length","About","myStyle","setMyStyle","_useState3","_useState4","btnText","setbtnText","aria-labelledby","data-bs-parent","defaultProps","about","App","setMode","document","body","react_router_dist","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.5b3237f3.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg bg-${props.mode} navbar-${props.mode}  `} >\r\n  <div className=\"container-fluid\">\r\n    <Link className=\"navbar-brand\" to=\"/about\">{props.title}</Link>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"/navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n        </li>\r\n       \r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n        </li>\r\n         \r\n        \r\n       \r\n      </ul>\r\n      <div className ={`form-check form-switch text-${props.mode===\"light\"?\"dark\":\"light\"}`}>\r\n  <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" onClick={props.changeMode} id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.mode===\"light\"?\"Enable Dark Mode\":\"Enable light mode\"}</label>\r\n  <button type=\"button\" className=\"btn btn-primary mx-3\" onClick={props.dbMode}>Dark Blue</button>\r\n<button type=\"button\" className=\"btn btn-secondary mx-3\" onClick={props.greyMode}>Dark grey</button>\r\n<button type=\"button\" className=\"btn btn-success mx-3\" onClick={props.gMode}>Green</button>\r\n<button type=\"button\" className=\"btn btn-danger mx-3\" onClick={props.rMode}>Red</button>\r\n<button type=\"button\" className=\"btn btn-warning mx-3\"onClick={props.yMode}>Yellow</button>\r\n<button type=\"button\" className=\"btn btn-info mx-3\" onClick={props.skMode}>Sky Blue</button>\r\n</div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n  )\r\n}\r\nNavbar.propTypes={titel:PropTypes.string, about:PropTypes.string,}\r\nNavbar.defaultProps={\r\n    title:'Set title here',\r\n    about:'Set about here'\r\n}","import React, {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n   function upperclick(){\r\n   \r\n        console.log(\"function was clicked\");\r\n        let newtext=text.toUpperCase();\r\n        setText(newtext);\r\n    }\r\n    function lowercase()\r\n    {\r\n        let newtext2=text.toLocaleLowerCase();\r\n        setText(newtext2);\r\n    }\r\n    function clrtext()\r\n    {\r\n        let newtext=(\"\");\r\n        setText(newtext);\r\n    }\r\n    function reverse()\r\n    {\r\n        let newtext=text.split(\" \").reverse().join(\" \");\r\n        setText(newtext);\r\n\r\n    }\r\n    const handelOnchange=(event)=>{\r\n        console.log(\"onchange\");\r\n        setText(event.target.value);\r\n       \r\n\r\n    }\r\n    const reversealpha=()=>{\r\n        let reversealpha =text.split('').reverse().join('');\r\n        setText(reversealpha)\r\n    }\r\n    function RemoveSpace(){\r\n        let RemoveSpace=text.split(' ').join('');\r\n        setText(RemoveSpace)\r\n    }\r\n\r\n    const [text, setText] = useState('');\r\n   \r\n   return (\r\n    <>\r\n    \r\n        \r\n<div className=\"container \" style={{backgroundColor:props.mode==='dark'?'yellow':'white', color:'black'}}>\r\n   <h1>{props.heading} </h1>\r\n  \r\n  <textarea className='form-control'  value={text} placeholder='Enter the Text' onChange={handelOnchange} style={{backgroundColor:props.mode==='light'?'white':'gray', color:props.mode==='light'?'black':'white', cursor:'pointer'}}   id=\"MyBox\" rows=\"8\" ></textarea>\r\n\r\n<button className='btn btn-primary my-3 mx-3' onClick={upperclick} >Convert to uppercase</button>\r\n<button className='btn btn-primary mx-3 my-3' onClick={lowercase}>Convert to lowercase</button>\r\n<button className='btn btn-primary mx-3 my-3' onClick={clrtext}>Clear text</button>\r\n<button className='btn btn-primary' onClick={reverse}>reverse</button>\r\n<button className='btn btn-primary mx-3 my-3' onClick={reversealpha}>Reverse Each Alphabets</button>\r\n<button className='btn btn-primary mx-3 my-3' onClick={RemoveSpace}>Remove Extra Space</button>\r\n</div>\r\n<div className='container my-3' style={{color:props.mode==='dark'?'white':'black'}}>\r\n    <h1>your text Summary</h1>\r\n    <p>{text.split(\" \").length-1} words</p>\r\n    <p>{text.split(\" \").length*0.008} minutes to read</p>\r\n    \r\n    <p>\r\n       {text.length} Alphabets\r\n    </p>\r\n    <h1>Preview Text</h1>\r\n   <p> {text}</p>\r\n\r\n</div>\r\n</>\r\n   \r\n  )\r\n}\r\n","import React,{useState} from 'react'\r\n\r\nexport default function About() {\r\n     const [myStyle, setMyStyle] = useState({\r\n        color:'white',\r\n        backgroundColor:'Black'\r\n\r\n     })\r\n      const [btnText, setbtnText] = useState('Click for dark mode')\r\n     const toggelStyle=()=>\r\n     {\r\n        if(myStyle.color==='white')\r\n        {\r\n            setMyStyle({\r\n                color:'black',\r\n                backgroundColor:'white'\r\n            })\r\n            setbtnText('Enter dark mode')\r\n\r\n        }\r\n        else\r\n        {\r\n         setMyStyle(\r\n            {\r\n                color:'white',\r\n                backgroundColor:'black'\r\n            }\r\n         )\r\n         setbtnText('Enter light mode')\r\n        }\r\n     }\r\n  return (\r\n    <>\r\n    <div className='container' style={myStyle}>\r\n        <h1>About Us</h1>\r\n      <div className=\"accordion mx-3\" id=\"accordionExample\">\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n      <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n        Accordion Item #1\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\">\r\n        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n      <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n        Accordion Item #2\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\">\r\n        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n      <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n        Accordion Item #3\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\">\r\n        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<button type=\"button\" className=\"btn btn-dark my-3 mx-3\" onClick={toggelStyle} >{btnText}</button>\r\n    </div>\r\n    </>\r\n  )\r\n  \r\n}\r\n","\nimport './App.css';\n\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\nimport About from './Components/About';\n\nimport React, {useState} from 'react';\n\nimport {\n  BrowserRouter as Router,\n  \n  Route,\n  Routes,\n \n} from \"react-router-dom\";\n\n\n\n\n\n//let name=prompt(\"What is your name\");\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  \n\n  \n  function changeMode()\n  {\n    if(mode==='light')\n    {\n      setMode('dark');\n      document.body.style.backgroundColor='#212529';\n     // alert('dark mode on')\n     document.title='Text Utils dark mode'\n      \n\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor='white';\n     // alert('light mode on ')\n     document.title='Text Utils light mode'\n    }\n  }\n  function dbMode(){\n    if(mode==='light')\n    {\n      setMode('blue');\n      document.body.style.backgroundColor='blue';\n\n    }\n    else{\n    setMode('light');\n    document.body.style.backgroundColor='white';\n  }}\n  function greyMode(){\n    if(mode==='light')\n    {\n      setMode('gray')\n      document.body.style.backgroundColor='gray';\n    }\n    else{\n      setMode('light')\n      document.body.style.backgroundColor='white';\n    }}\n    const gMode=()=>\n    {\n      if(mode==='light')\n    {\n      setMode('green')\n      document.body.style.backgroundColor='green';\n    }\n    else{\n      setMode('light')\n      document.body.style.backgroundColor='white';\n\n    }\n\n  }\n  const rMode=()=>\n  {\n    if(mode==='light')\n    {\n      setMode('red')\n      document.body.style.backgroundColor='red'\n    }\n    else{\n      setMode('light')\n      document.body.style.backgroundColor='white'\n    }\n  }\n  const yMode=()=>{\n    if(mode==='light')\n    {\n      setMode('yellow')\n      document.body.style.backgroundColor='yellow'\n    }\n    else{\n      setMode('light')\n      document.body.style.backgroundColor='white'\n\n    }}\n    function skMode()\n    {\n      if(mode==='light')\n      {\n        setMode('\t#ADD8E6')\n        document.body.style.backgroundColor='\t#ADD8E6'\n      }\n      else{\n        setMode('light')\n        document.body.style.backgroundColor='white'\n    }\n  }\n    \n  \n  \n  return (\n    <>\n    <Router>\n   \n<Navbar title=\"TextUtil\" about=\"About Us\" mode={mode} changeMode={changeMode} dbMode={dbMode} greyMode={greyMode} gMode={gMode} rMode={rMode} yMode={yMode} skMode={skMode}/>\n\n<div className='container my-3'>\n  \n  \n          \n         \n        \n       \n        <Routes>\n          <Route path=\"/about\" element={<About />}>\n            \n          </Route>\n         \n          <Route path=\"/\" element={<TextForm heading=\"Enter the Components to analyze\" mode={mode} />}>\n          \n          </Route>\n        </Routes>\n \n \n\n\n</div>\n</Router>\n\n\n   </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}